patrick@DESKTOP-5MBUUP8:/mnt/d/UFRGS/2021-2/compiladores/Aulas/Trabalho/etapa6$ make clean && make && ./etapa6 test_programs/test_1.txt output.txt && gcc test_programs/test_1.s && ./a.out
rm lex.yy.c y.tab.c y.tab.h *.o etapa6
gcc -c -g main.c
yacc -d parser.y
parser.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]
lex scanner.l
gcc -c -g  lex.yy.c
gcc -c -g  y.tab.c
gcc -c -g  hash.c
gcc -c -g  ast.c
gcc -c -g  semantic.c
gcc -c -g tacs.c
gcc -c -g  asm.c
gcc -c -g commons.c
gcc main.o lex.yy.o y.tab.o hash.o ast.o semantic.o tacs.o asm.o commons.o -g -o etapa6


Semantics start

 Undeclared semantic errors: 0

ast(AST_PROGRAM) {
  ast(AST_DECLARATION_LIST) {
    ast(AST_DECLARATION_GLOBAL_INT, input__dash__one) {
      ast(AST_SYMBOL, 0) {
    ast(AST_DECLARATION_LIST) {
      ast(AST_DECLARATION_GLOBAL_INT, input__dash__two) {
        ast(AST_SYMBOL, 0) {
      ast(AST_DECLARATION_LIST) {
        ast(AST_DECLARATION_GLOBAL_INT, result) {
          ast(AST_SYMBOL, 0) {
        ast(AST_DECLARATION_LIST) {
          ast(AST_DECLARATION_FUNCTION_INT, main) {
            ast(AST_DECLARATION_FUNCTION_BODY) {
              ast(AST_COMMAND_BLOCK) {
                ast(AST_COMMAND_LIST) {
                  ast(AST_PRINT) {
                    ast(AST_PRINT_STRING) {
                      ast(AST_SYMBOL, Teste 1:) {
                  ast(AST_COMMAND_LIST) {
                    ast(AST_PRINT) {
                      ast(AST_PRINT_STRING) {
                        ast(AST_SYMBOL, Atribuições e operações aritmeticas com impressão:  [read, +, __dash__, *, /] \n) {
                    ast(AST_COMMAND_LIST) {
                      ast(AST_PRINT) {
                        ast(AST_PRINT_STRING) {
                          ast(AST_SYMBOL, \n) {
                          ast(AST_PRINT_STRING) {
                            ast(AST_SYMBOL, Enter the first value: ) {
                      ast(AST_COMMAND_LIST) {
                        ast(AST_ATTRIBUITION, input__dash__one) {
                          ast(AST_READ) {
                        ast(AST_COMMAND_LIST) {
                          ast(AST_PRINT) {
                            ast(AST_PRINT_STRING) {
                              ast(AST_SYMBOL, Enter the second value: ) {
                          ast(AST_COMMAND_LIST) {
                            ast(AST_ATTRIBUITION, input__dash__two) {
                              ast(AST_READ) {
                            ast(AST_COMMAND_LIST) {
                              ast(AST_PRINT) {
                                ast(AST_PRINT_STRING) {
                                  ast(AST_SYMBOL, \n) {
                                  ast(AST_PRINT_STRING) {
                                    ast(AST_SYMBOL, input1 + input2 = ) {
                                    ast(AST_PRINT_EXP) {
                                      ast(AST_ADD, +) {
                                        ast(AST_SYMBOL, input__dash__one) {
                                        ast(AST_SYMBOL, input__dash__two) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_PRINT) {
                                  ast(AST_PRINT_STRING) {
                                    ast(AST_SYMBOL, \n) {
                                    ast(AST_PRINT_STRING) {
                                      ast(AST_SYMBOL, input1 __dash__ input2 = ) {
                                      ast(AST_PRINT_EXP) {
                                        ast(AST_SUB, __dash__) {
                                          ast(AST_SYMBOL, input__dash__one) {
                                          ast(AST_SYMBOL, input__dash__two) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_PRINT) {
                                    ast(AST_PRINT_STRING) {
                                      ast(AST_SYMBOL, \n) {
                                      ast(AST_PRINT_STRING) {
                                        ast(AST_SYMBOL, input1 * input2 = ) {
                                        ast(AST_PRINT_EXP) {
                                          ast(AST_MULT, *) {
                                            ast(AST_SYMBOL, input__dash__one) {
                                            ast(AST_SYMBOL, input__dash__two) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_PRINT) {
                                      ast(AST_PRINT_STRING) {
                                        ast(AST_SYMBOL, \n) {
                                        ast(AST_PRINT_STRING) {
                                          ast(AST_SYMBOL, input1 / input2 = ) {
                                          ast(AST_PRINT_EXP) {
                                            ast(AST_DIV, /) {
                                              ast(AST_SYMBOL, input__dash__one) {
                                              ast(AST_SYMBOL, input__dash__two) {
                                            ast(AST_PRINT_STRING) {
                                              ast(AST_SYMBOL, \n) {

hash after tacGenerateCode

Table[0]         has input1 * input2 =           type 264        datatype 5      datavalue 0     datastring (null)
Table[23]        has main        type 259        datatype 1      datavalue 0     datastring (null)
Table[24]        has _TMP_VAR_11         type 1607       datatype 5      datavalue 0     datastring input1 __dash__ input2 =
Table[36]        has _TMP_VAR_4          type 1607       datatype 0      datavalue 0     datastring (null)
Table[37]        has Enter the first value:              type 264        datatype 5      datavalue 0     datastring (null)
Table[42]        has *           type 271        datatype 0      datavalue 0     datastring (null)
Table[43]        has +           type 269        datatype 0      datavalue 0     datastring (null)
Table[47]        has /           type 272        datatype 0      datavalue 0     datastring (null)
Table[48]        has 0           type 262        datatype 1      datavalue 0     datastring (null)
Table[75]        has Teste 1:            type 264        datatype 5      datavalue 0     datastring (null)
Table[87]        has _TMP_VAR_15         type 1607       datatype 5      datavalue 0     datastring \n
Table[112]       has _TMP_VAR_3          type 1607       datatype 5      datavalue 0     datastring \n
Table[150]       has _TMP_VAR_19         type 1607       datatype 5      datavalue 0     datastring \n
Table[154]       has input__dash__one            type 258        datatype 1      datavalue 0     datastring (null)
Table[188]       has _TMP_VAR_2          type 1607       datatype 5      datavalue 0     datastring Enter the first value:
Table[208]       has input1 / input2 =           type 264        datatype 5      datavalue 0     datastring (null)
Table[241]       has input1 + input2 =           type 264        datatype 5      datavalue 0     datastring (null)
Table[260]       has \n          type 264        datatype 5      datavalue 0     datastring (null)
Table[264]       has _TMP_VAR_1          type 1607       datatype 5      datavalue 0     datastring Atribuições e operações aritmeticas com impressão:  [read, +, __dash__, *, /] \n
Table[289]       has _TMP_VAR_12         type 1607       datatype 5      datavalue 0     datastring \n
Table[340]       has _TMP_VAR_0          type 1607       datatype 5      datavalue 0     datastring Teste 1:
Table[352]       has _TMP_VAR_16         type 1607       datatype 0      datavalue 0     datastring (null)
Table[554]       has _TMP_VAR_13         type 1607       datatype 0      datavalue 0     datastring (null)
Table[617]       has _TMP_VAR_17         type 1607       datatype 5      datavalue 0     datastring \n
Table[653]       has _TMP_VAR_9          type 1607       datatype 5      datavalue 0     datastring \n
Table[686]       has input__dash__two            type 258        datatype 1      datavalue 0     datastring (null)
Table[717]       has Enter the second value:             type 264        datatype 5      datavalue 0     datastring (null)
Table[729]       has _TMP_VAR_8          type 1607       datatype 5      datavalue 0     datastring input1 + input2 =
Table[748]       has result      type 258        datatype 1      datavalue 0     datastring (null)
Table[756]       has _TMP_VAR_10         type 1607       datatype 0      datavalue 0     datastring (null)
Table[805]       has _TMP_VAR_7          type 1607       datatype 0      datavalue 0     datastring (null)
Table[814]       has __dash__            type 270        datatype 0      datavalue 0     datastring (null)
Table[819]       has _TMP_VAR_14         type 1607       datatype 5      datavalue 0     datastring input1 * input2 =
Table[876]       has input1 __dash__ input2 =            type 264        datatype 5      datavalue 0     datastring (null)
Table[881]       has _TMP_VAR_6          type 1607       datatype 0      datavalue 0     datastring (null)
Table[882]       has _TMP_VAR_18         type 1607       datatype 5      datavalue 0     datastring input1 / input2 =
Table[943]       has Atribuições e operações aritmeticas com impressão:  [read, +, __dash__, *, /] \n            type 264        datatype 5      datavalue 0     datastring (null)
Table[957]       has _TMP_VAR_5          type 1607       datatype 5      datavalue 0     datastring Enter the second value:


TAC(TAC_DEC_GLOBAL_INT, input__dash__one, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, input__dash__two, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, result, 0, 0);
TAC(TAC_BEGINFUN, main, _TMP_VAR_17, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_0, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_0, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_1, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_1, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_3, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_2, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_2, 0, 0);
TAC(TAC_READ, _TMP_VAR_4, 0, 0);
TAC(TAC_MOVE, input__dash__one, _TMP_VAR_4, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_5, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_5, 0, 0);
TAC(TAC_READ, _TMP_VAR_6, 0, 0);
TAC(TAC_MOVE, input__dash__two, _TMP_VAR_6, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_9, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_8, 0, 0);
TAC(TAC_ADD, _TMP_VAR_7, input__dash__one, input__dash__two);
TAC(TAC_PRINT_INT, _TMP_VAR_7, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_7, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_12, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_11, 0, 0);
TAC(TAC_SUB, _TMP_VAR_10, input__dash__one, input__dash__two);
TAC(TAC_PRINT_INT, _TMP_VAR_10, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_10, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_15, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_14, 0, 0);
TAC(TAC_MULT, _TMP_VAR_13, input__dash__one, input__dash__two);
TAC(TAC_PRINT_INT, _TMP_VAR_13, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_13, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_19, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_18, 0, 0);
TAC(TAC_DIV, _TMP_VAR_16, input__dash__one, input__dash__two);
TAC(TAC_PRINT_INT, _TMP_VAR_16, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_17, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_17, 0, 0);
TAC(TAC_ENDFUN, main, 0, 0);
Numero de linhas: 19.
Compilation Success.

Teste 1:Atribuições e operações aritmeticas com impressão:  [read, +, -, *, /]

Enter the first value: 36
Enter the second value: 4

input1 + input2 = 40
input1 - input2 = 32
input1 * input2 = 144
input1 / input2 = 9
