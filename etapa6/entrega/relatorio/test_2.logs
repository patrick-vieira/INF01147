patrick@DESKTOP-5MBUUP8:/mnt/d/UFRGS/2021-2/compiladores/Aulas/Trabalho/etapa6$ make clean && make && ./etapa6 test_programs/test_2.txt output.txt && gcc test_programs/test_2.s && ./a.out
rm lex.yy.c y.tab.c y.tab.h *.o etapa6
gcc -c -g main.c
yacc -d parser.y
parser.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]
lex scanner.l
gcc -c -g  lex.yy.c
gcc -c -g  y.tab.c
gcc -c -g  hash.c
gcc -c -g  ast.c
gcc -c -g  semantic.c
gcc -c -g tacs.c
gcc -c -g  asm.c
gcc -c -g commons.c
gcc main.o lex.yy.o y.tab.o hash.o ast.o semantic.o tacs.o asm.o commons.o -g -o etapa6


Semantics start

 Undeclared semantic errors: 0

ast(AST_PROGRAM) {
  ast(AST_DECLARATION_LIST) {
    ast(AST_DECLARATION_GLOBAL_INT, input__dash__one) {
      ast(AST_SYMBOL, 0) {
    ast(AST_DECLARATION_LIST) {
      ast(AST_DECLARATION_GLOBAL_INT, input__dash__two) {
        ast(AST_SYMBOL, 0) {
      ast(AST_DECLARATION_LIST) {
        ast(AST_DECLARATION_GLOBAL_INT, result__dash__fac) {
          ast(AST_SYMBOL, 0) {
        ast(AST_DECLARATION_LIST) {
          ast(AST_DECLARATION_GLOBAL_INT, a) {
            ast(AST_SYMBOL, 0) {
          ast(AST_DECLARATION_LIST) {
            ast(AST_DECLARATION_GLOBAL_INT, b) {
              ast(AST_SYMBOL, 1) {
            ast(AST_DECLARATION_LIST) {
              ast(AST_DECLARATION_GLOBAL_INT, result__dash__fib) {
                ast(AST_SYMBOL, 0) {
              ast(AST_DECLARATION_LIST) {
                ast(AST_DECLARATION_GLOBAL_INT, result) {
                  ast(AST_SYMBOL, 0) {
                ast(AST_DECLARATION_LIST) {
                  ast(AST_DECLARATION_GLOBAL_INT, n) {
                    ast(AST_SYMBOL, 0) {
                  ast(AST_DECLARATION_LIST) {
                    ast(AST_DECLARATION_FUNCTION_INT, fatorial) {
                      ast(AST_DECLARATION_FUNCTION_ARGS_INT, argsa) {
                      ast(AST_DECLARATION_FUNCTION_BODY) {
                        ast(AST_COMMAND_BLOCK) {
                          ast(AST_COMMAND_LIST) {
                            ast(AST_ATTRIBUITION, n) {
                              ast(AST_SYMBOL, argsa) {
                            ast(AST_COMMAND_LIST) {
                              ast(AST_ATTRIBUITION, result) {
                                ast(AST_SYMBOL, 1) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_FLUX_CONTROLL_WHILE) {
                                  ast(AST_EXPRESSION_BLOCK) {
                                    ast(AST_GT, >) {
                                      ast(AST_SYMBOL, n) {
                                      ast(AST_SYMBOL, 1) {
                                  ast(AST_COMMAND_BLOCK) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_ATTRIBUITION, result) {
                                        ast(AST_MULT, *) {
                                          ast(AST_SYMBOL, result) {
                                          ast(AST_SYMBOL, n) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_ATTRIBUITION, n) {
                                          ast(AST_SUB, __dash__) {
                                            ast(AST_SYMBOL, n) {
                                            ast(AST_SYMBOL, 1) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_RETURN) {
                                    ast(AST_SYMBOL, result) {
                    ast(AST_DECLARATION_LIST) {
                      ast(AST_DECLARATION_FUNCTION_INT, fibonacci) {
                        ast(AST_DECLARATION_FUNCTION_ARGS_INT, argsb) {
                        ast(AST_DECLARATION_FUNCTION_BODY) {
                          ast(AST_COMMAND_BLOCK) {
                            ast(AST_COMMAND_LIST) {
                              ast(AST_ATTRIBUITION, n) {
                                ast(AST_SYMBOL, argsb) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                  ast(AST_EXPRESSION_BLOCK) {
                                    ast(AST_EQ, ==) {
                                      ast(AST_SYMBOL, n) {
                                      ast(AST_SYMBOL, 0) {
                                  ast(AST_COMMAND_BLOCK) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_RETURN) {
                                        ast(AST_SYMBOL, 0) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                    ast(AST_EXPRESSION_BLOCK) {
                                      ast(AST_EQ, ==) {
                                        ast(AST_SYMBOL, n) {
                                        ast(AST_SYMBOL, 1) {
                                    ast(AST_COMMAND_BLOCK) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_RETURN) {
                                          ast(AST_SYMBOL, 1) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_ATTRIBUITION, result) {
                                      ast(AST_SYMBOL, 1) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_FLUX_CONTROLL_WHILE) {
                                        ast(AST_EXPRESSION_BLOCK) {
                                          ast(AST_GT, >) {
                                            ast(AST_SYMBOL, n) {
                                            ast(AST_SYMBOL, 1) {
                                        ast(AST_COMMAND_BLOCK) {
                                          ast(AST_COMMAND_LIST) {
                                            ast(AST_ATTRIBUITION, result) {
                                              ast(AST_ADD, +) {
                                                ast(AST_SYMBOL, a) {
                                                ast(AST_SYMBOL, b) {
                                            ast(AST_COMMAND_LIST) {
                                              ast(AST_ATTRIBUITION, a) {
                                                ast(AST_SYMBOL, b) {
                                              ast(AST_COMMAND_LIST) {
                                                ast(AST_ATTRIBUITION, b) {
                                                  ast(AST_SYMBOL, result) {
                                                ast(AST_COMMAND_LIST) {
                                                  ast(AST_ATTRIBUITION, n) {
                                                    ast(AST_SUB, __dash__) {
                                                      ast(AST_SYMBOL, n) {
                                                      ast(AST_SYMBOL, 1) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_RETURN) {
                                          ast(AST_SYMBOL, result) {
                      ast(AST_DECLARATION_LIST) {
                        ast(AST_DECLARATION_FUNCTION_INT, main) {
                          ast(AST_DECLARATION_FUNCTION_BODY) {
                            ast(AST_COMMAND_BLOCK) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_PRINT) {
                                  ast(AST_PRINT_STRING) {
                                    ast(AST_SYMBOL, Teste 1:) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_PRINT) {
                                    ast(AST_PRINT_STRING) {
                                      ast(AST_SYMBOL, Calculo fatorial e fubinacci, [read, while, if, function call] \n) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_PRINT) {
                                      ast(AST_PRINT_STRING) {
                                        ast(AST_SYMBOL, \n) {
                                        ast(AST_PRINT_STRING) {
                                          ast(AST_SYMBOL, Enter the first value: ) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_ATTRIBUITION, input__dash__one) {
                                        ast(AST_READ) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_PRINT) {
                                          ast(AST_PRINT_STRING) {
                                            ast(AST_SYMBOL, Enter the second value: ) {
                                        ast(AST_COMMAND_LIST) {
                                          ast(AST_ATTRIBUITION, input__dash__two) {
                                            ast(AST_READ) {
                                          ast(AST_COMMAND_LIST) {
                                            ast(AST_ATTRIBUITION, result__dash__fac) {
                                              ast(AST_FUNCTION_CALL, fatorial) {
                                                ast(AST_FUNCTION_CALL_ARGS) {
                                                  ast(AST_SYMBOL, input__dash__one) {
                                            ast(AST_COMMAND_LIST) {
                                              ast(AST_ATTRIBUITION, result__dash__fib) {
                                                ast(AST_FUNCTION_CALL, fibonacci) {
                                                  ast(AST_FUNCTION_CALL_ARGS) {
                                                    ast(AST_SYMBOL, input__dash__two) {
                                              ast(AST_COMMAND_LIST) {
                                                ast(AST_PRINT) {
                                                  ast(AST_PRINT_STRING) {
                                                    ast(AST_SYMBOL, \nO valor de ) {
                                                    ast(AST_PRINT_EXP) {
                                                      ast(AST_SYMBOL, input__dash__one) {
                                                      ast(AST_PRINT_STRING) {
                                                        ast(AST_SYMBOL, ! é ) {
                                                        ast(AST_PRINT_EXP) {
                                                          ast(AST_SYMBOL, result__dash__fac) {
                                                ast(AST_COMMAND_LIST) {
                                                  ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                                    ast(AST_EXPRESSION_BLOCK) {
                                                      ast(AST_GT, >) {
                                                        ast(AST_SYMBOL, result__dash__fac) {
                                                        ast(AST_SYMBOL, result__dash__fib) {
                                                    ast(AST_COMMAND_BLOCK) {
                                                      ast(AST_COMMAND_LIST) {
                                                        ast(AST_PRINT) {
                                                          ast(AST_PRINT_STRING) {
                                                            ast(AST_SYMBOL,  que é maior do que o ) {
                                                    ast(AST_COMMAND_BLOCK) {
                                                      ast(AST_COMMAND_LIST) {
                                                        ast(AST_PRINT) {
                                                          ast(AST_PRINT_STRING) {
                                                            ast(AST_SYMBOL,  que é menor do que o ) {
                                                  ast(AST_COMMAND_LIST) {
                                                    ast(AST_PRINT) {
                                                      ast(AST_PRINT_EXP) {
                                                        ast(AST_SYMBOL, input__dash__two) {
                                                        ast(AST_PRINT_STRING) {
                                                          ast(AST_SYMBOL, º numero de fibonacci, que é ) {
                                                          ast(AST_PRINT_EXP) {
                                                            ast(AST_SYMBOL, result__dash__fib) {
                                                            ast(AST_PRINT_STRING) {
                                                              ast(AST_SYMBOL, \n) {
                                                    ast(AST_COMMAND_LIST) {
                                                      ast(AST_ATTRIBUITION, a) {
                                                        ast(AST_SUB, __dash__) {
                                                          ast(AST_SYMBOL, result__dash__fac) {
                                                          ast(AST_SYMBOL, result__dash__fib) {
                                                      ast(AST_COMMAND_LIST) {
                                                        ast(AST_ATTRIBUITION, b) {
                                                          ast(AST_SYMBOL, 0) {
                                                        ast(AST_COMMAND_LIST) {
                                                          ast(AST_FLUX_CONTROLL_WHILE) {
                                                            ast(AST_EXPRESSION_BLOCK) {
                                                              ast(AST_GT, >) {
                                                                ast(AST_SYMBOL, a) {
                                                                ast(AST_SYMBOL, 0) {
                                                            ast(AST_COMMAND_BLOCK) {
                                                              ast(AST_COMMAND_LIST) {
                                                                ast(AST_ATTRIBUITION, b) {
                                                                  ast(AST_ADD, +) {
                                                                    ast(AST_SYMBOL, b) {
                                                                    ast(AST_SYMBOL, 1) {
                                                                ast(AST_COMMAND_LIST) {
                                                                  ast(AST_ATTRIBUITION, a) {
                                                                    ast(AST_SUB, __dash__) {
                                                                      ast(AST_SYMBOL, a) {
                                                                      ast(AST_SYMBOL, result__dash__fib) {
                                                          ast(AST_COMMAND_LIST) {
                                                            ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                                              ast(AST_EXPRESSION_BLOCK) {
                                                                ast(AST_LT, <) {
                                                                  ast(AST_SYMBOL, 0) {
                                                                  ast(AST_SYMBOL, b) {
                                                              ast(AST_COMMAND_BLOCK) {
                                                                ast(AST_COMMAND_LIST) {
                                                                  ast(AST_PRINT) {
                                                                    ast(AST_PRINT_STRING) {
                                                                      ast(AST_SYMBOL, \nO fatorial de ) {
                                                                      ast(AST_PRINT_EXP) {
                                                                        ast(AST_SYMBOL, input__dash__one) {
                                                                        ast(AST_PRINT_STRING) {
                                                                          ast(AST_SYMBOL,  é, pelo menos, ) {
                                                                          ast(AST_PRINT_EXP) {
                                                                            ast(AST_SYMBOL, b) {
                                                                            ast(AST_PRINT_STRING) {
                                                                              ast(AST_SYMBOL, x maior que o ) {
                                                                              ast(AST_PRINT_EXP) {
                                                                                ast(AST_SYMBOL, input__dash__two) {
                                                                                ast(AST_PRINT_STRING) {
                                                                                  ast(AST_SYMBOL, º numero de fibonacci.\n) {

hash after tacGenerateCode

Table[23]        has main        type 259        datatype 1      datavalue 0     datastring (null)
Table[24]        has _TMP_VAR_11         type 1607       datatype 5      datavalue 0     datastring \n
Table[36]        has _TMP_VAR_4          type 1607       datatype 0      datavalue 0     datastring (null)
Table[37]        has Enter the first value:              type 264        datatype 5      datavalue 0     datastring (null)
Table[42]        has *           type 271        datatype 0      datavalue 0     datastring (null)
Table[43]        has +           type 269        datatype 0      datavalue 0     datastring (null)
Table[47]        has _TMP_VAR_25         type 1607       datatype 5      datavalue 0     datastring º numero de fibonacci, que é
Table[48]        has 0           type 262        datatype 1      datavalue 0     datastring (null)
Table[49]        has 1           type 262        datatype 1      datavalue 1     datastring (null)
Table[50]        has _TMP_LABEL_1        type 265        datatype 0      datavalue 0     datastring (null)
Table[60]        has <           type 274        datatype 0      datavalue 0     datastring (null)
Table[60]        has ! é         type 264        datatype 5      datavalue 0     datastring (null)
Table[62]        has >           type 276        datatype 0      datavalue 0     datastring (null)
Table[75]        has Teste 1:            type 264        datatype 5      datavalue 0     datastring (null)
Table[77]        has fibonacci           type 259        datatype 1      datavalue 0     datastring (null)
Table[87]        has _TMP_VAR_15         type 1607       datatype 0      datavalue 0     datastring (null)
Table[97]        has a           type 258        datatype 1      datavalue 0     datastring (null)
Table[98]        has b           type 258        datatype 1      datavalue 1     datastring (null)
Table[99]        has _TMP_VAR_20         type 1607       datatype 5      datavalue 0     datastring \nO valor de
Table[110]       has n           type 258        datatype 1      datavalue 0     datastring (null)
Table[112]       has _TMP_VAR_3          type 1607       datatype 0      datavalue 0     datastring (null)
Table[150]       has _TMP_VAR_19         type 1607       datatype 5      datavalue 0     datastring ! é
Table[154]       has input__dash__one            type 258        datatype 1      datavalue 0     datastring (null)
Table[188]       has _TMP_VAR_2          type 1607       datatype 0      datavalue 0     datastring (null)
Table[220]       has º numero de fibonacci.\n            type 264        datatype 5      datavalue 0     datastring (null)
Table[236]       has _TMP_VAR_26         type 1607       datatype 0      datavalue 0     datastring (null)
Table[260]       has \n          type 264        datatype 5      datavalue 0     datastring (null)
Table[263]       has  é, pelo menos,             type 264        datatype 5      datavalue 0     datastring (null)
Table[264]       has _TMP_VAR_1          type 1607       datatype 0      datavalue 0     datastring (null)
Table[272]       has argsa       type 260        datatype 1      datavalue 0     datastring (null)
Table[288]       has _TMP_VAR_21         type 1607       datatype 0      datavalue 0     datastring (null)
Table[289]       has _TMP_VAR_12         type 1607       datatype 0      datavalue 0     datastring (null)
Table[340]       has _TMP_VAR_0          type 1607       datatype 0      datavalue 0     datastring (null)
Table[342]       has _TMP_LABEL_8        type 265        datatype 0      datavalue 0     datastring (null)
Table[344]       has  que é maior do que o       type 264        datatype 5      datavalue 0     datastring (null)
Table[346]       has result__dash__fac           type 258        datatype 1      datavalue 0     datastring (null)
Table[352]       has _TMP_VAR_16         type 1607       datatype 0      datavalue 0     datastring (null)
Table[357]       has \nO fatorial de             type 264        datatype 5      datavalue 0     datastring (null)
Table[371]       has  que é menor do que o       type 264        datatype 5      datavalue 0     datastring (null)
Table[401]       has _TMP_LABEL_6        type 265        datatype 0      datavalue 0     datastring (null)
Table[425]       has _TMP_VAR_27         type 1607       datatype 0      datavalue 0     datastring (null)
Table[439]       has _TMP_VAR_30         type 1607       datatype 0      datavalue 0     datastring (null)
Table[454]       has _TMP_LABEL_10       type 265        datatype 0      datavalue 0     datastring (null)
Table[460]       has _TMP_LABEL_4        type 265        datatype 0      datavalue 0     datastring (null)
Table[477]       has _TMP_VAR_22         type 1607       datatype 5      datavalue 0     datastring  que é maior do que o
Table[519]       has _TMP_LABEL_2        type 265        datatype 0      datavalue 0     datastring (null)
Table[552]       has _TMP_VAR_31         type 1607       datatype 5      datavalue 0     datastring º numero de fibonacci.\n
Table[554]       has _TMP_VAR_13         type 1607       datatype 5      datavalue 0     datastring Enter the second value:
Table[556]       has fatorial            type 259        datatype 1      datavalue 0     datastring (null)
Table[578]       has _TMP_LABEL_0        type 265        datatype 0      datavalue 0     datastring (null)
Table[581]       has Calculo fatorial e fubinacci, [read, while, if, function call] \n           type 264        datatype 5      datavalue 0     datastring (null)
Table[614]       has _TMP_VAR_28         type 1607       datatype 0      datavalue 0     datastring (null)
Table[617]       has _TMP_VAR_17         type 1607       datatype 0      datavalue 0     datastring (null)
Table[653]       has _TMP_VAR_9          type 1607       datatype 5      datavalue 0     datastring Calculo fatorial e fubinacci, [read, while, if, function call] \n
Table[665]       has _TMP_VAR_32         type 1607       datatype 5      datavalue 0     datastring x maior que o
Table[666]       has _TMP_VAR_23         type 1607       datatype 5      datavalue 0     datastring  que é menor do que o
Table[686]       has input__dash__two            type 258        datatype 1      datavalue 0     datastring (null)
Table[717]       has Enter the second value:             type 264        datatype 5      datavalue 0     datastring (null)
Table[729]       has _TMP_VAR_8          type 1607       datatype 5      datavalue 0     datastring Teste 1:
Table[748]       has result      type 258        datatype 1      datavalue 0     datastring (null)
Table[756]       has _TMP_VAR_10         type 1607       datatype 5      datavalue 0     datastring Enter the first value:
Table[778]       has _TMP_VAR_33         type 1607       datatype 5      datavalue 0     datastring  é, pelo menos,
Table[791]       has ==          type 277        datatype 0      datavalue 0     datastring (null)
Table[799]       has argsb       type 260        datatype 1      datavalue 0     datastring (null)
Table[803]       has _TMP_VAR_29         type 1607       datatype 0      datavalue 0     datastring (null)
Table[805]       has _TMP_VAR_7          type 1607       datatype 0      datavalue 0     datastring (null)
Table[809]       has result__dash__fib           type 258        datatype 1      datavalue 0     datastring (null)
Table[811]       has _TMP_LABEL_9        type 265        datatype 0      datavalue 0     datastring (null)
Table[814]       has __dash__            type 270        datatype 0      datavalue 0     datastring (null)
Table[819]       has _TMP_VAR_14         type 1607       datatype 0      datavalue 0     datastring (null)
Table[855]       has _TMP_VAR_24         type 1607       datatype 5      datavalue 0     datastring \n
Table[870]       has _TMP_LABEL_7        type 265        datatype 0      datavalue 0     datastring (null)
Table[874]       has \nO valor de        type 264        datatype 5      datavalue 0     datastring (null)
Table[881]       has _TMP_VAR_6          type 1607       datatype 0      datavalue 0     datastring (null)
Table[882]       has _TMP_VAR_18         type 1607       datatype 0      datavalue 0     datastring (null)
Table[891]       has _TMP_VAR_34         type 1607       datatype 5      datavalue 0     datastring \nO fatorial de
Table[900]       has º numero de fibonacci, que é        type 264        datatype 5      datavalue 0     datastring (null)
Table[913]       has x maior que o       type 264        datatype 5      datavalue 0     datastring (null)
Table[929]       has _TMP_LABEL_5        type 265        datatype 0      datavalue 0     datastring (null)
Table[957]       has _TMP_VAR_5          type 1607       datatype 0      datavalue 0     datastring (null)
Table[988]       has _TMP_LABEL_3        type 265        datatype 0      datavalue 0     datastring (null)


TAC(TAC_DEC_GLOBAL_INT, input__dash__one, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, input__dash__two, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, result__dash__fac, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, a, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, b, 1, 0);
TAC(TAC_DEC_GLOBAL_INT, result__dash__fib, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, result, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, n, 0, 0);
TAC(TAC_DEC_FUNC_ARGS, argsa, 0, 0);
TAC(TAC_BEGINFUN, fatorial, result, 0);
TAC(TAC_MOVE, n, argsa, 0);
TAC(TAC_MOVE, result, 1, 0);
TAC(TAC_LABEL, _TMP_LABEL_0, 0, 0);
TAC(TAC_GT, _TMP_VAR_0, n, 1);
TAC(TAC_JMPZ, _TMP_LABEL_1, _TMP_VAR_0, 0);
TAC(TAC_MULT, _TMP_VAR_1, result, n);
TAC(TAC_MOVE, result, _TMP_VAR_1, 0);
TAC(TAC_SUB, _TMP_VAR_2, n, 1);
TAC(TAC_MOVE, n, _TMP_VAR_2, 0);
TAC(TAC_JMP, _TMP_LABEL_0, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_1, 0, 0);
TAC(TAC_RETURN, result, 0, 0);
TAC(TAC_ENDFUN, fatorial, argsa, 0);
TAC(TAC_DEC_FUNC_ARGS, argsb, 0, 0);
TAC(TAC_BEGINFUN, fibonacci, result, 0);
TAC(TAC_MOVE, n, argsb, 0);
TAC(TAC_EQ, _TMP_VAR_3, n, 0);
TAC(TAC_JMPZ, _TMP_LABEL_2, _TMP_VAR_3, 0);
TAC(TAC_RETURN, 0, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_2, 0, 0);
TAC(TAC_EQ, _TMP_VAR_4, n, 1);
TAC(TAC_JMPZ, _TMP_LABEL_3, _TMP_VAR_4, 0);
TAC(TAC_RETURN, 1, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_3, 0, 0);
TAC(TAC_MOVE, result, 1, 0);
TAC(TAC_LABEL, _TMP_LABEL_4, 0, 0);
TAC(TAC_GT, _TMP_VAR_5, n, 1);
TAC(TAC_JMPZ, _TMP_LABEL_5, _TMP_VAR_5, 0);
TAC(TAC_ADD, _TMP_VAR_6, a, b);
TAC(TAC_MOVE, result, _TMP_VAR_6, 0);
TAC(TAC_MOVE, a, b, 0);
TAC(TAC_MOVE, b, result, 0);
TAC(TAC_SUB, _TMP_VAR_7, n, 1);
TAC(TAC_MOVE, n, _TMP_VAR_7, 0);
TAC(TAC_JMP, _TMP_LABEL_4, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_5, 0, 0);
TAC(TAC_RETURN, result, 0, 0);
TAC(TAC_ENDFUN, fibonacci, argsb, 0);
TAC(TAC_BEGINFUN, main, _TMP_LABEL_10, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_8, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_8, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_9, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_9, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_11, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_10, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_10, 0, 0);
TAC(TAC_READ, _TMP_VAR_12, 0, 0);
TAC(TAC_MOVE, input__dash__one, _TMP_VAR_12, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_13, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_13, 0, 0);
TAC(TAC_READ, _TMP_VAR_14, 0, 0);
TAC(TAC_MOVE, input__dash__two, _TMP_VAR_14, 0);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_15, input__dash__one, 0);
TAC(TAC_FUN_CALL, _TMP_VAR_16, fatorial, 0);
TAC(TAC_MOVE, result__dash__fac, _TMP_VAR_16, 0);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_17, input__dash__two, 0);
TAC(TAC_FUN_CALL, _TMP_VAR_18, fibonacci, 0);
TAC(TAC_MOVE, result__dash__fib, _TMP_VAR_18, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_20, 0, 0);
TAC(TAC_PRINT_INT, input__dash__one, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_19, 0, 0);
TAC(TAC_PRINT_INT, result__dash__fac, 0, 0);
TAC(TAC_PRINT, result__dash__fac, 0, 0);
TAC(TAC_GT, _TMP_VAR_21, result__dash__fac, result__dash__fib);
TAC(TAC_JMPZ, _TMP_LABEL_6, _TMP_VAR_21, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_22, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_22, 0, 0);
TAC(TAC_JMP, _TMP_LABEL_7, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_6, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_23, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_23, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_7, 0, 0);
TAC(TAC_PRINT_INT, input__dash__two, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_25, 0, 0);
TAC(TAC_PRINT_INT, result__dash__fib, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_24, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_24, 0, 0);
TAC(TAC_SUB, _TMP_VAR_26, result__dash__fac, result__dash__fib);
TAC(TAC_MOVE, a, _TMP_VAR_26, 0);
TAC(TAC_MOVE, b, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_8, 0, 0);
TAC(TAC_GT, _TMP_VAR_27, a, 0);
TAC(TAC_JMPZ, _TMP_LABEL_9, _TMP_VAR_27, 0);
TAC(TAC_ADD, _TMP_VAR_28, b, 1);
TAC(TAC_MOVE, b, _TMP_VAR_28, 0);
TAC(TAC_SUB, _TMP_VAR_29, a, result__dash__fib);
TAC(TAC_MOVE, a, _TMP_VAR_29, 0);
TAC(TAC_JMP, _TMP_LABEL_8, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_9, 0, 0);
TAC(TAC_LT, _TMP_VAR_30, 0, b);
TAC(TAC_JMPZ, _TMP_LABEL_10, _TMP_VAR_30, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_34, 0, 0);
TAC(TAC_PRINT_INT, input__dash__one, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_33, 0, 0);
TAC(TAC_PRINT_INT, b, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_32, 0, 0);
TAC(TAC_PRINT_INT, input__dash__two, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_31, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_31, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_10, 0, 0);
TAC(TAC_ENDFUN, main, 0, 0);
condition: (n==0) body_if: {
return 0;

} body_else:

.condition: (n==1) body_if: {
return 1;

} body_else:

.condition: (result__dash__fac>result__dash__fib) body_if: {
print " que é maior do que o ";

} body_else:{
print " que é menor do que o ";

}

.condition: (0<b) body_if: {
print "\nO fatorial de ", input__dash__one, " é, pelo menos, ", b, "x maior que o ", input__dash__two, "º numero de fibonacci.\n";

} body_else:

.Numero de linhas: 83.
Compilation Success.
Teste 1:Calculo fatorial e fubinacci, [read, while, if, function call]

Enter the first value: 7
Enter the second value: 12

O valor de 7! é 5040 que é maior do que o 12º numero de fibonacci, que é 144

O fatorial de 7 é, pelo menos, 34x maior que o 12º numero de fibonacci.
