patrick@DESKTOP-5MBUUP8:/mnt/d/UFRGS/2021-2/compiladores/Aulas/Trabalho/etapa6$ make clean && make && ./etapa6 test_programs/test_4.txt output.txt && gcc test_programs/test_4.s && ./a.out
rm lex.yy.c y.tab.c y.tab.h *.o etapa6
gcc -c -g main.c
yacc -d parser.y
parser.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]
lex scanner.l
gcc -c -g  lex.yy.c
gcc -c -g  y.tab.c
gcc -c -g  hash.c
gcc -c -g  ast.c
gcc -c -g  semantic.c
gcc -c -g tacs.c
gcc -c -g  asm.c
gcc -c -g commons.c
gcc main.o lex.yy.o y.tab.o hash.o ast.o semantic.o tacs.o asm.o commons.o -g -o etapa6


Semantics start

 Undeclared semantic errors: 0

ast(AST_PROGRAM) {
  ast(AST_DECLARATION_LIST) {
    ast(AST_DECLARATION_GLOBAL_INT, in__dash__repeat) {
      ast(AST_SYMBOL, 0) {
    ast(AST_DECLARATION_LIST) {
      ast(AST_DECLARATION_GLOBAL_CHAR, first__dash__char) {
        ast(AST_SYMBOL, 'a') {
      ast(AST_DECLARATION_LIST) {
        ast(AST_DECLARATION_GLOBAL_INT, result) {
          ast(AST_SYMBOL, 0) {
        ast(AST_DECLARATION_LIST) {
          ast(AST_DECLARATION_GLOBAL_INT, n) {
            ast(AST_SYMBOL, 0) {
          ast(AST_DECLARATION_LIST) {
            ast(AST_DECLARATION_GLOBAL_FLOAT, fa) {
              ast(AST_SYMBOL, 2) {
              ast(AST_SYMBOL, 3) {
            ast(AST_DECLARATION_LIST) {
              ast(AST_DECLARATION_GLOBAL_FLOAT, fb) {
                ast(AST_SYMBOL, 5) {
                ast(AST_SYMBOL, 6) {
              ast(AST_DECLARATION_LIST) {
                ast(AST_DECLARATION_GLOBAL_INT, count) {
                  ast(AST_SYMBOL, 0) {
                ast(AST_DECLARATION_LIST) {
                  ast(AST_DECLARATION_FUNCTION_INT, repeatchar) {
                    ast(AST_DECLARATION_FUNCTION_ARGS_INT, repeat) {
                      ast(AST_DECLARATION_FUNCTION_ARGS_CHAR, caracter) {
                        ast(AST_DECLARATION_FUNCTION_ARGS_FLOAT, argsfa) {
                          ast(AST_DECLARATION_FUNCTION_ARGS_FLOAT, argsfb) {
                    ast(AST_DECLARATION_FUNCTION_BODY) {
                      ast(AST_COMMAND_BLOCK) {
                        ast(AST_COMMAND_LIST) {
                          ast(AST_PRINT) {
                            ast(AST_PRINT_STRING) {
                              ast(AST_SYMBOL, As proximas ) {
                              ast(AST_PRINT_EXP) {
                                ast(AST_SYMBOL, repeat) {
                                ast(AST_PRINT_STRING) {
                                  ast(AST_SYMBOL,  letras do alfabeto depois de [) {
                                  ast(AST_PRINT_EXP) {
                                    ast(AST_SYMBOL, caracter) {
                                    ast(AST_PRINT_STRING) {
                                      ast(AST_SYMBOL, ] são: \n) {
                          ast(AST_COMMAND_LIST) {
                            ast(AST_FLUX_CONTROLL_WHILE) {
                              ast(AST_EXPRESSION_BLOCK) {
                                ast(AST_LT, <) {
                                  ast(AST_SYMBOL, count) {
                                  ast(AST_SYMBOL, repeat) {
                              ast(AST_COMMAND_BLOCK) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_PRINT) {
                                    ast(AST_PRINT_EXP) {
                                      ast(AST_SYMBOL, caracter) {
                                      ast(AST_PRINT_STRING) {
                                        ast(AST_SYMBOL, , ) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_ATTRIBUITION, count) {
                                      ast(AST_ADD, +) {
                                        ast(AST_SYMBOL, count) {
                                        ast(AST_SYMBOL, 1) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_ATTRIBUITION, caracter) {
                                        ast(AST_ADD, +) {
                                          ast(AST_SYMBOL, caracter) {
                                          ast(AST_SYMBOL, 1) {
                            ast(AST_COMMAND_LIST) {
                              ast(AST_PRINT) {
                                ast(AST_PRINT_STRING) {
                                  ast(AST_SYMBOL, \n\n O terceiro argumento é um float com valor: ) {
                                  ast(AST_PRINT_EXP) {
                                    ast(AST_SYMBOL, argsfa) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_PRINT) {
                                  ast(AST_PRINT_STRING) {
                                    ast(AST_SYMBOL, \n\n O quarto argumento é um float com valor: ) {
                                    ast(AST_PRINT_EXP) {
                                      ast(AST_SYMBOL, argsfb) {
                                      ast(AST_PRINT_STRING) {
                                        ast(AST_SYMBOL, \n) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_RETURN) {
                                    ast(AST_SYMBOL, result) {
                  ast(AST_DECLARATION_LIST) {
                    ast(AST_DECLARATION_FUNCTION_INT, main) {
                      ast(AST_DECLARATION_FUNCTION_BODY) {
                        ast(AST_COMMAND_BLOCK) {
                          ast(AST_COMMAND_LIST) {
                            ast(AST_PRINT) {
                              ast(AST_PRINT_STRING) {
                                ast(AST_SYMBOL, Teste 4:) {
                            ast(AST_COMMAND_LIST) {
                              ast(AST_PRINT) {
                                ast(AST_PRINT_STRING) {
                                  ast(AST_SYMBOL, tipos de dados e chamadas com multiplos argumentos [int, char, float] \n) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_PRINT) {
                                  ast(AST_PRINT_STRING) {
                                    ast(AST_SYMBOL, \n) {
                                    ast(AST_PRINT_STRING) {
                                      ast(AST_SYMBOL, Digite o numero de letras: ) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_ATTRIBUITION, in__dash__repeat) {
                                    ast(AST_READ) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_RETURN) {
                                      ast(AST_FUNCTION_CALL, repeatchar) {
                                        ast(AST_FUNCTION_CALL_ARGS) {
                                          ast(AST_SYMBOL, in__dash__repeat) {
                                          ast(AST_FUNCTION_CALL_ARGS) {
                                            ast(AST_SYMBOL, first__dash__char) {
                                            ast(AST_FUNCTION_CALL_ARGS) {
                                              ast(AST_SYMBOL, fa) {
                                              ast(AST_FUNCTION_CALL_ARGS) {
                                                ast(AST_SYMBOL, fb) {

hash after tacGenerateCode

Table[14]        has first__dash__char           type 258        datatype 2      datavalue 97    datastring 'a'
Table[15]        has Teste 4:            type 264        datatype 5      datavalue 0     datastring (null)
Table[21]        has fa          type 258        datatype 3      datavalue 2     datastring 3
Table[23]        has main        type 259        datatype 1      datavalue 0     datastring (null)
Table[24]        has _TMP_VAR_11         type 1607       datatype 5      datavalue 0     datastring tipos de dados e chamadas com multiplos argumentos [int, char, float] \n
Table[36]        has _TMP_VAR_4          type 1607       datatype 5      datavalue 0     datastring ,
Table[43]        has +           type 269        datatype 0      datavalue 0     datastring (null)
Table[47]        has /           type 272        datatype 0      datavalue 0     datastring (null)
Table[48]        has 0           type 262        datatype 1      datavalue 0     datastring (null)
Table[49]        has 1           type 262        datatype 1      datavalue 1     datastring (null)
Table[50]        has _TMP_LABEL_1        type 265        datatype 0      datavalue 0     datastring (null)
Table[50]        has 2           type 262        datatype 1      datavalue 2     datastring (null)
Table[51]        has 3           type 262        datatype 1      datavalue 3     datastring (null)
Table[53]        has 5           type 262        datatype 1      datavalue 5     datastring (null)
Table[54]        has 6           type 262        datatype 1      datavalue 6     datastring (null)
Table[60]        has <           type 274        datatype 0      datavalue 0     datastring (null)
Table[87]        has _TMP_VAR_15         type 1607       datatype 0      datavalue 0     datastring (null)
Table[101]       has \n\n O quarto argumento é um float com valor:       type 264        datatype 5      datavalue 0     datastring (null)
Table[110]       has n           type 258        datatype 1      datavalue 0     datastring (null)
Table[112]       has _TMP_VAR_3          type 1607       datatype 0      datavalue 0     datastring (null)
Table[124]       has fb          type 258        datatype 3      datavalue 5     datastring 6
Table[150]       has _TMP_VAR_19         type 1607       datatype 0      datavalue 0     datastring (null)
Table[154]       has count       type 258        datatype 1      datavalue 0     datastring (null)
Table[188]       has _TMP_VAR_2          type 1607       datatype 5      datavalue 0     datastring As proximas
Table[188]       has tipos de dados e chamadas com multiplos argumentos [int, char, float] \n            type 264        datatype 5      datavalue 0     datastring (null)
Table[213]       has repeat      type 260        datatype 1      datavalue 0     datastring (null)
Table[260]       has \n          type 264        datatype 5      datavalue 0     datastring (null)
Table[264]       has _TMP_VAR_1          type 1607       datatype 5      datavalue 0     datastring  letras do alfabeto depois de [
Table[289]       has _TMP_VAR_12         type 1607       datatype 5      datavalue 0     datastring Digite o numero de letras:
Table[310]       has  letras do alfabeto depois de [             type 264        datatype 5      datavalue 0     datastring (null)
Table[324]       has repeatchar          type 259        datatype 1      datavalue 0     datastring (null)
Table[340]       has _TMP_VAR_0          type 1607       datatype 5      datavalue 0     datastring ] são: \n
Table[352]       has _TMP_VAR_16         type 1607       datatype 0      datavalue 0     datastring (null)
Table[443]       has ,           type 264        datatype 5      datavalue 0     datastring (null)
Table[461]       has in__dash__repeat            type 258        datatype 1      datavalue 0     datastring (null)
Table[554]       has _TMP_VAR_13         type 1607       datatype 5      datavalue 0     datastring \n
Table[578]       has _TMP_LABEL_0        type 265        datatype 0      datavalue 0     datastring (null)
Table[617]       has _TMP_VAR_17         type 1607       datatype 0      datavalue 0     datastring (null)
Table[623]       has Digite o numero de letras:          type 264        datatype 5      datavalue 0     datastring (null)
Table[653]       has _TMP_VAR_9          type 1607       datatype 5      datavalue 0     datastring \n\n O quarto argumento é um float com valor:
Table[667]       has \n\n O terceiro argumento é um float com valor:             type 264        datatype 5      datavalue 0     datastring (null)
Table[729]       has _TMP_VAR_8          type 1607       datatype 5      datavalue 0     datastring \n
Table[748]       has result      type 258        datatype 1      datavalue 0     datastring (null)
Table[756]       has _TMP_VAR_10         type 1607       datatype 5      datavalue 0     datastring Teste 4:
Table[805]       has _TMP_VAR_7          type 1607       datatype 5      datavalue 0     datastring \n\n O terceiro argumento é um float com valor:
Table[812]       has 'a'         type 263        datatype 2      datavalue 0     datastring (null)
Table[819]       has _TMP_VAR_14         type 1607       datatype 0      datavalue 0     datastring (null)
Table[839]       has argsfb      type 260        datatype 3      datavalue 0     datastring
Table[876]       has caracter            type 260        datatype 2      datavalue 114   datastring argsfa
Table[881]       has _TMP_VAR_6          type 1607       datatype 0      datavalue 0     datastring (null)
Table[882]       has _TMP_VAR_18         type 1607       datatype 0      datavalue 0     datastring (null)
Table[915]       has ] são: \n           type 264        datatype 5      datavalue 0     datastring (null)
Table[922]       has argsfa      type 260        datatype 3      datavalue 0     datastring
Table[957]       has _TMP_VAR_5          type 1607       datatype 0      datavalue 0     datastring (null)
Table[957]       has As proximas         type 264        datatype 5      datavalue 0     datastring (null)


TAC(TAC_DEC_GLOBAL_INT, in__dash__repeat, 0, 0);
TAC(TAC_DEC_GLOBAL_CHAR, first__dash__char, 'a', 0);
TAC(TAC_DEC_GLOBAL_INT, result, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, n, 0, 0);
TAC(TAC_DEC_GLOBAL_FLOAT, fa, 2, 3);
TAC(TAC_DEC_GLOBAL_FLOAT, fb, 5, 6);
TAC(TAC_DEC_GLOBAL_INT, count, 0, 0);
TAC(TAC_UNKNOWN, argsfb, 0, 0);
TAC(TAC_UNKNOWN, argsfa, argsfb, 0);
TAC(TAC_DEC_FUNC_ARGS, caracter, argsfa, 0);
TAC(TAC_DEC_FUNC_ARGS, repeat, caracter, 0);
TAC(TAC_BEGINFUN, repeatchar, result, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_2, 0, 0);
TAC(TAC_PRINT_INT, repeat, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_1, 0, 0);
TAC(TAC_PRINT_CHAR, caracter, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_0, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_0, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_0, 0, 0);
TAC(TAC_LT, _TMP_VAR_3, count, repeat);
TAC(TAC_JMPZ, _TMP_LABEL_1, _TMP_VAR_3, 0);
TAC(TAC_PRINT_CHAR, caracter, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_4, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_4, 0, 0);
TAC(TAC_ADD, _TMP_VAR_5, count, 1);
TAC(TAC_MOVE, count, _TMP_VAR_5, 0);
TAC(TAC_ADD, _TMP_VAR_6, caracter, 1);
TAC(TAC_MOVE, caracter, _TMP_VAR_6, 0);
TAC(TAC_JMP, _TMP_LABEL_0, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_1, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_7, 0, 0);
TAC(TAC_UNKNOWN, argsfa, 0, 0);
TAC(TAC_PRINT, argsfa, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_9, 0, 0);
TAC(TAC_UNKNOWN, argsfb, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_8, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_8, 0, 0);
TAC(TAC_RETURN, result, 0, 0);
TAC(TAC_ENDFUN, repeatchar, repeat, 0);
TAC(TAC_BEGINFUN, main, _TMP_VAR_19, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_10, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_10, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_11, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_11, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_13, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_12, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_12, 0, 0);
TAC(TAC_READ, _TMP_VAR_14, 0, 0);
TAC(TAC_MOVE, in__dash__repeat, _TMP_VAR_14, 0);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_15, fb, 0);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_16, fa, _TMP_VAR_15);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_17, first__dash__char, _TMP_VAR_16);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_18, in__dash__repeat, _TMP_VAR_17);
TAC(TAC_FUN_CALL, _TMP_VAR_19, repeatchar, 0);
TAC(TAC_RETURN, _TMP_VAR_19, 0, 0);
TAC(TAC_ENDFUN, main, 0, 0);
Numero de linhas: 40.
Compilation Success.
Teste 4:tipos de dados e chamadas com multiplos argumentos [int, char, float]

Digite o numero de letras: 21
As proximas 21 letras do alfabeto depois de [a] são:
a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u,

 O terceiro argumento é um float com valor: 2/3

 O quarto argumento é um float com valor: 5/6
