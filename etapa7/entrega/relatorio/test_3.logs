patrick@DESKTOP-5MBUUP8:/mnt/d/UFRGS/2021-2/compiladores/Aulas/Trabalho/etapa6$ make clean && make && ./etapa6 test_programs/test_3.txt output.txt && gcc test_programs/test_3.s && ./a.out
rm lex.yy.c y.tab.c y.tab.h *.o etapa6
gcc -c -g main.c
yacc -d parser.y
parser.y: warning: 1 shift/reduce conflict [-Wconflicts-sr]
lex scanner.l
gcc -c -g  lex.yy.c
gcc -c -g  y.tab.c
gcc -c -g  hash.c
gcc -c -g  ast.c
gcc -c -g  semantic.c
gcc -c -g tacs.c
gcc -c -g  asm.c
gcc -c -g commons.c
gcc main.o lex.yy.o y.tab.o hash.o ast.o semantic.o tacs.o asm.o commons.o -g -o etapa6


Semantics start

 Undeclared semantic errors: 0

ast(AST_PROGRAM) {
  ast(AST_DECLARATION_LIST) {
    ast(AST_DECLARATION_GLOBAL_INT, input) {
      ast(AST_SYMBOL, 0) {
    ast(AST_DECLARATION_LIST) {
      ast(AST_DECLARATION_GLOBAL_INT, result) {
        ast(AST_SYMBOL, 0) {
      ast(AST_DECLARATION_LIST) {
        ast(AST_DECLARATION_GLOBAL_INT, n) {
          ast(AST_SYMBOL, 0) {
        ast(AST_DECLARATION_LIST) {
          ast(AST_DECLARATION_GLOBAL_INT, a) {
            ast(AST_SYMBOL, 0) {
          ast(AST_DECLARATION_LIST) {
            ast(AST_DECLARATION_GLOBAL_INT, b) {
              ast(AST_SYMBOL, 0) {
            ast(AST_DECLARATION_LIST) {
              ast(AST_DECLARATION_GLOBAL_INT, total_n) {
                ast(AST_SYMBOL, 30) {
              ast(AST_DECLARATION_LIST) {
                ast(AST_DECLARATION_GLOBAL_ARRAY_INT, arr) {
                  ast(AST_SYMBOL, 20) {
                ast(AST_DECLARATION_LIST) {
                  ast(AST_DECLARATION_GLOBAL_INT, columns) {
                    ast(AST_SYMBOL, 6) {
                  ast(AST_DECLARATION_LIST) {
                    ast(AST_DECLARATION_GLOBAL_INT, count) {
                      ast(AST_SYMBOL, 0) {
                    ast(AST_DECLARATION_LIST) {
                      ast(AST_DECLARATION_FUNCTION_INT, fibonacci) {
                        ast(AST_DECLARATION_FUNCTION_ARGS_INT, argsb) {
                        ast(AST_DECLARATION_FUNCTION_BODY) {
                          ast(AST_COMMAND_BLOCK) {
                            ast(AST_COMMAND_LIST) {
                              ast(AST_ATTRIBUITION, a) {
                                ast(AST_SYMBOL, 0) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_ATTRIBUITION, b) {
                                  ast(AST_SYMBOL, 1) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                    ast(AST_EXPRESSION_BLOCK) {
                                      ast(AST_EQ, ==) {
                                        ast(AST_SYMBOL, argsb) {
                                        ast(AST_SYMBOL, 0) {
                                    ast(AST_COMMAND_BLOCK) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_RETURN) {
                                          ast(AST_SYMBOL, 0) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                      ast(AST_EXPRESSION_BLOCK) {
                                        ast(AST_EQ, ==) {
                                          ast(AST_SYMBOL, argsb) {
                                          ast(AST_SYMBOL, 1) {
                                      ast(AST_COMMAND_BLOCK) {
                                        ast(AST_COMMAND_LIST) {
                                          ast(AST_RETURN) {
                                            ast(AST_SYMBOL, 1) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_ATTRIBUITION, result) {
                                        ast(AST_SYMBOL, 1) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_FLUX_CONTROLL_WHILE) {
                                          ast(AST_EXPRESSION_BLOCK) {
                                            ast(AST_GT, >) {
                                              ast(AST_SYMBOL, argsb) {
                                              ast(AST_SYMBOL, 1) {
                                          ast(AST_COMMAND_BLOCK) {
                                            ast(AST_COMMAND_LIST) {
                                              ast(AST_ATTRIBUITION, result) {
                                                ast(AST_ADD, +) {
                                                  ast(AST_SYMBOL, a) {
                                                  ast(AST_SYMBOL, b) {
                                              ast(AST_COMMAND_LIST) {
                                                ast(AST_ATTRIBUITION, a) {
                                                  ast(AST_SYMBOL, b) {
                                                ast(AST_COMMAND_LIST) {
                                                  ast(AST_ATTRIBUITION, b) {
                                                    ast(AST_SYMBOL, result) {
                                                  ast(AST_COMMAND_LIST) {
                                                    ast(AST_ATTRIBUITION, argsb) {
                                                      ast(AST_SUB, __dash__) {
                                                        ast(AST_SYMBOL, argsb) {
                                                        ast(AST_SYMBOL, 1) {
                                        ast(AST_COMMAND_LIST) {
                                          ast(AST_RETURN) {
                                            ast(AST_SYMBOL, result) {
                      ast(AST_DECLARATION_LIST) {
                        ast(AST_DECLARATION_FUNCTION_INT, main) {
                          ast(AST_DECLARATION_FUNCTION_BODY) {
                            ast(AST_COMMAND_BLOCK) {
                              ast(AST_COMMAND_LIST) {
                                ast(AST_PRINT) {
                                  ast(AST_PRINT_STRING) {
                                    ast(AST_SYMBOL, Teste 3:) {
                                ast(AST_COMMAND_LIST) {
                                  ast(AST_PRINT) {
                                    ast(AST_PRINT_STRING) {
                                      ast(AST_SYMBOL, Arrays \n) {
                                  ast(AST_COMMAND_LIST) {
                                    ast(AST_PRINT) {
                                      ast(AST_PRINT_STRING) {
                                        ast(AST_SYMBOL, \n) {
                                        ast(AST_PRINT_STRING) {
                                          ast(AST_SYMBOL, Enter a number: ) {
                                    ast(AST_COMMAND_LIST) {
                                      ast(AST_ATTRIBUITION, input) {
                                        ast(AST_READ) {
                                      ast(AST_COMMAND_LIST) {
                                        ast(AST_ATTRIBUITION, n) {
                                          ast(AST_SYMBOL, 0) {
                                        ast(AST_COMMAND_LIST) {
                                          ast(AST_FLUX_CONTROLL_WHILE) {
                                            ast(AST_EXPRESSION_BLOCK) {
                                              ast(AST_LT, <) {
                                                ast(AST_SYMBOL, n) {
                                                ast(AST_SYMBOL, total_n) {
                                            ast(AST_COMMAND_BLOCK) {
                                              ast(AST_COMMAND_LIST) {
                                                ast(AST_ARRAY_ATTRIBUITION, arr) {
                                                  ast(AST_SYMBOL, n) {
                                                  ast(AST_FUNCTION_CALL, fibonacci) {
                                                    ast(AST_FUNCTION_CALL_ARGS) {
                                                      ast(AST_SYMBOL, n) {
                                                ast(AST_COMMAND_LIST) {
                                                  ast(AST_ATTRIBUITION, n) {
                                                    ast(AST_ADD, +) {
                                                      ast(AST_SYMBOL, n) {
                                                      ast(AST_SYMBOL, 1) {
                                          ast(AST_COMMAND_LIST) {
                                            ast(AST_ATTRIBUITION, n) {
                                              ast(AST_SYMBOL, 0) {
                                            ast(AST_COMMAND_LIST) {
                                              ast(AST_PRINT) {
                                                ast(AST_PRINT_STRING) {
                                                  ast(AST_SYMBOL, \nOs ) {
                                                  ast(AST_PRINT_EXP) {
                                                    ast(AST_SYMBOL, total_n) {
                                                    ast(AST_PRINT_STRING) {
                                                      ast(AST_SYMBOL,  primeiros numeros da sequencia de fibonacci sÃ£o: \n) {
                                              ast(AST_COMMAND_LIST) {
                                                ast(AST_FLUX_CONTROLL_WHILE) {
                                                  ast(AST_EXPRESSION_BLOCK) {
                                                    ast(AST_LT, <) {
                                                      ast(AST_SYMBOL, n) {
                                                      ast(AST_SYMBOL, total_n) {
                                                  ast(AST_COMMAND_BLOCK) {
                                                    ast(AST_COMMAND_LIST) {
                                                      ast(AST_ARRAY_ATTRIBUITION, arr) {
                                                        ast(AST_SYMBOL, n) {
                                                        ast(AST_FUNCTION_CALL, fibonacci) {
                                                          ast(AST_FUNCTION_CALL_ARGS) {
                                                            ast(AST_SYMBOL, n) {
                                                      ast(AST_COMMAND_LIST) {
                                                        ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                                          ast(AST_EQ, ==) {
                                                            ast(AST_SYMBOL, input) {
                                                            ast(AST_ARRAY_ELEMENT, arr) {
                                                              ast(AST_SYMBOL, n) {
                                                          ast(AST_PRINT) {
                                                            ast(AST_PRINT_STRING) {
                                                              ast(AST_SYMBOL, [__dash__>) {
                                                              ast(AST_PRINT_EXP) {
                                                                ast(AST_ARRAY_ELEMENT, arr) {
                                                                  ast(AST_SYMBOL, n) {
                                                                ast(AST_PRINT_STRING) {
                                                                  ast(AST_SYMBOL, <__dash__] ) {
                                                          ast(AST_PRINT) {
                                                            ast(AST_PRINT_EXP) {
                                                              ast(AST_ARRAY_ELEMENT, arr) {
                                                                ast(AST_SYMBOL, n) {
                                                              ast(AST_PRINT_STRING) {
                                                                ast(AST_SYMBOL, \t) {
                                                        ast(AST_COMMAND_LIST) {
                                                          ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                                            ast(AST_GT, >) {
                                                              ast(AST_SYMBOL, input) {
                                                              ast(AST_ARRAY_ELEMENT, arr) {
                                                                ast(AST_SYMBOL, n) {
                                                            ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                                              ast(AST_LT, <) {
                                                                ast(AST_SYMBOL, input) {
                                                                ast(AST_ARRAY_ELEMENT, arr) {
                                                                  ast(AST_ADD, +) {
                                                                    ast(AST_SYMBOL, n) {
                                                                    ast(AST_SYMBOL, 1) {
                                                              ast(AST_PRINT) {
                                                                ast(AST_PRINT_STRING) {
                                                                  ast(AST_SYMBOL, [*] ) {
                                                          ast(AST_COMMAND_LIST) {
                                                            ast(AST_ATTRIBUITION, n) {
                                                              ast(AST_ADD, +) {
                                                                ast(AST_SYMBOL, n) {
                                                                ast(AST_SYMBOL, 1) {
                                                            ast(AST_COMMAND_LIST) {
                                                              ast(AST_FLUX_CONTROLL_IF|ELSE) {
                                                                ast(AST_EXPRESSION_BLOCK) {
                                                                  ast(AST_GTE, >=) {
                                                                    ast(AST_SYMBOL, count) {
                                                                    ast(AST_SYMBOL, columns) {
                                                                ast(AST_COMMAND_BLOCK) {
                                                                  ast(AST_COMMAND_LIST) {
                                                                    ast(AST_PRINT) {
                                                                      ast(AST_PRINT_STRING) {
                                                                        ast(AST_SYMBOL, \n) {
                                                                    ast(AST_COMMAND_LIST) {
                                                                      ast(AST_ATTRIBUITION, count) {
                                                                        ast(AST_SYMBOL, 0) {
                                                                ast(AST_COMMAND_BLOCK) {
                                                                  ast(AST_COMMAND_LIST) {
                                                                    ast(AST_ATTRIBUITION, count) {
                                                                      ast(AST_ADD, +) {
                                                                        ast(AST_SYMBOL, count) {
                                                                        ast(AST_SYMBOL, 1) {
                                                ast(AST_COMMAND_LIST) {
                                                  ast(AST_PRINT) {
                                                    ast(AST_PRINT_STRING) {
                                                      ast(AST_SYMBOL, \n) {

hash after tacGenerateCode

Table[7]         has _TMP_VAR_35         type 1607       datatype 0      datavalue 0     datastring (null)
Table[23]        has main        type 259        datatype 1      datavalue 0     datastring (null)
Table[24]        has _TMP_VAR_11         type 1607       datatype 0      datavalue 0     datastring (null)
Table[35]        has Teste 3:            type 264        datatype 5      datavalue 0     datastring (null)
Table[36]        has _TMP_VAR_4          type 1607       datatype 0      datavalue 0     datastring (null)
Table[43]        has +           type 269        datatype 0      datavalue 0     datastring (null)
Table[47]        has _TMP_VAR_25         type 1607       datatype 5      datavalue 0     datastring \t
Table[48]        has 0           type 262        datatype 1      datavalue 0     datastring (null)
Table[49]        has 1           type 262        datatype 1      datavalue 1     datastring (null)
Table[50]        has _TMP_LABEL_1        type 265        datatype 0      datavalue 0     datastring (null)
Table[54]        has 6           type 262        datatype 1      datavalue 6     datastring (null)
Table[60]        has <           type 274        datatype 0      datavalue 0     datastring (null)
Table[62]        has >           type 276        datatype 0      datavalue 0     datastring (null)
Table[77]        has fibonacci           type 259        datatype 1      datavalue 0     datastring (null)
Table[87]        has _TMP_VAR_15         type 1607       datatype 5      datavalue 0     datastring \nOs
Table[97]        has a           type 258        datatype 1      datavalue 0     datastring (null)
Table[98]        has b           type 258        datatype 1      datavalue 0     datastring (null)
Table[99]        has _TMP_VAR_20         type 1607       datatype 0      datavalue 0     datastring (null)
Table[110]       has n           type 258        datatype 1      datavalue 0     datastring (null)
Table[112]       has _TMP_VAR_3          type 1607       datatype 0      datavalue 0     datastring (null)
Table[120]       has _TMP_VAR_36         type 1607       datatype 5      datavalue 0     datastring \n
Table[126]       has Arrays \n           type 264        datatype 5      datavalue 0     datastring (null)
Table[150]       has _TMP_VAR_19         type 1607       datatype 0      datavalue 0     datastring (null)
Table[154]       has count       type 258        datatype 1      datavalue 0     datastring (null)
Table[174]       has  primeiros numeros da sequencia de fibonacci sÃ£o: \n        type 264        datatype 5      datavalue 0     datastring (null)
Table[180]       has <__dash__]          type 264        datatype 5      datavalue 0     datastring (null)
Table[188]       has _TMP_VAR_2          type 1607       datatype 0      datavalue 0     datastring (null)
Table[192]       has [__dash__>          type 264        datatype 5      datavalue 0     datastring (null)
Table[199]       has Enter a number:             type 264        datatype 5      datavalue 0     datastring (null)
Table[236]       has _TMP_VAR_26         type 1607       datatype 0      datavalue 0     datastring (null)
Table[260]       has \n          type 264        datatype 5      datavalue 0     datastring (null)
Table[264]       has _TMP_VAR_1          type 1607       datatype 0      datavalue 0     datastring (null)
Table[288]       has _TMP_VAR_21         type 1607       datatype 0      datavalue 0     datastring (null)
Table[289]       has _TMP_VAR_12         type 1607       datatype 0      datavalue 0     datastring (null)
Table[325]       has total_n             type 258        datatype 1      datavalue 30    datastring (null)
Table[340]       has _TMP_VAR_0          type 1607       datatype 0      datavalue 0     datastring (null)
Table[342]       has _TMP_LABEL_8        type 265        datatype 0      datavalue 0     datastring (null)
Table[352]       has _TMP_VAR_16         type 1607       datatype 0      datavalue 0     datastring (null)
Table[365]       has columns             type 258        datatype 1      datavalue 6     datastring (null)
Table[401]       has _TMP_LABEL_6        type 265        datatype 0      datavalue 0     datastring (null)
Table[425]       has _TMP_VAR_27         type 1607       datatype 0      datavalue 0     datastring (null)
Table[439]       has _TMP_VAR_30         type 1607       datatype 0      datavalue 0     datastring (null)
Table[440]       has input       type 258        datatype 1      datavalue 0     datastring (null)
Table[454]       has _TMP_LABEL_10       type 265        datatype 0      datavalue 0     datastring (null)
Table[454]       has 20          type 262        datatype 1      datavalue 20    datastring (null)
Table[460]       has _TMP_LABEL_4        type 265        datatype 0      datavalue 0     datastring (null)
Table[477]       has _TMP_VAR_22         type 1607       datatype 5      datavalue 0     datastring <__dash__]
Table[502]       has 30          type 262        datatype 1      datavalue 30    datastring (null)
Table[505]       has _TMP_LABEL_11       type 265        datatype 0      datavalue 0     datastring (null)
Table[519]       has _TMP_LABEL_2        type 265        datatype 0      datavalue 0     datastring (null)
Table[552]       has _TMP_VAR_31         type 1607       datatype 5      datavalue 0     datastring [*]
Table[553]       has arr         type 261        datatype 10     datavalue 20    datastring (null)
Table[554]       has _TMP_VAR_13         type 1607       datatype 0      datavalue 0     datastring (null)
Table[556]       has _TMP_LABEL_12       type 265        datatype 0      datavalue 0     datastring (null)
Table[578]       has _TMP_LABEL_0        type 265        datatype 0      datavalue 0     datastring (null)
Table[607]       has _TMP_LABEL_13       type 265        datatype 0      datavalue 0     datastring (null)
Table[614]       has _TMP_VAR_28         type 1607       datatype 0      datavalue 0     datastring (null)
Table[617]       has _TMP_VAR_17         type 1607       datatype 0      datavalue 0     datastring (null)
Table[653]       has _TMP_VAR_9          type 1607       datatype 0      datavalue 0     datastring (null)
Table[665]       has _TMP_VAR_32         type 1607       datatype 0      datavalue 0     datastring (null)
Table[666]       has _TMP_VAR_23         type 1607       datatype 5      datavalue 0     datastring [__dash__>
Table[729]       has _TMP_VAR_8          type 1607       datatype 5      datavalue 0     datastring \n
Table[748]       has result      type 258        datatype 1      datavalue 0     datastring (null)
Table[756]       has _TMP_VAR_10         type 1607       datatype 0      datavalue 0     datastring (null)
Table[778]       has _TMP_VAR_33         type 1607       datatype 0      datavalue 0     datastring (null)
Table[791]       has ==          type 277        datatype 0      datavalue 0     datastring (null)
Table[799]       has argsb       type 260        datatype 1      datavalue 0     datastring (null)
Table[803]       has _TMP_VAR_29         type 1607       datatype 0      datavalue 0     datastring (null)
Table[805]       has _TMP_VAR_7          type 1607       datatype 5      datavalue 0     datastring Enter a number:
Table[811]       has _TMP_LABEL_9        type 265        datatype 0      datavalue 0     datastring (null)
Table[814]       has __dash__            type 270        datatype 0      datavalue 0     datastring (null)
Table[818]       has \t          type 264        datatype 5      datavalue 0     datastring (null)
Table[819]       has _TMP_VAR_14         type 1607       datatype 5      datavalue 0     datastring  primeiros numeros da sequencia de fibonacci sÃ£o: \n
Table[852]       has >=          type 275        datatype 0      datavalue 0     datastring (null)
Table[855]       has _TMP_VAR_24         type 1607       datatype 0      datavalue 0     datastring (null)
Table[870]       has _TMP_LABEL_7        type 265        datatype 0      datavalue 0     datastring (null)
Table[880]       has [*]         type 264        datatype 5      datavalue 0     datastring (null)
Table[881]       has _TMP_VAR_6          type 1607       datatype 5      datavalue 0     datastring Arrays \n
Table[882]       has _TMP_VAR_18         type 1607       datatype 0      datavalue 0     datastring (null)
Table[891]       has _TMP_VAR_34         type 1607       datatype 5      datavalue 0     datastring \n
Table[929]       has _TMP_LABEL_5        type 265        datatype 0      datavalue 0     datastring (null)
Table[957]       has _TMP_VAR_5          type 1607       datatype 5      datavalue 0     datastring Teste 3:
Table[959]       has \nOs        type 264        datatype 5      datavalue 0     datastring (null)
Table[988]       has _TMP_LABEL_3        type 265        datatype 0      datavalue 0     datastring (null)


TAC(TAC_DEC_GLOBAL_INT, input, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, result, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, n, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, a, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, b, 0, 0);
TAC(TAC_DEC_GLOBAL_INT, total_n, 30, 0);
TAC(TAC_DEC_GLOBAL_ARR, arr, 0, 20);
TAC(TAC_DEC_GLOBAL_INT, columns, 6, 0);
TAC(TAC_DEC_GLOBAL_INT, count, 0, 0);
TAC(TAC_DEC_FUNC_ARGS, argsb, 0, 0);
TAC(TAC_BEGINFUN, fibonacci, result, 0);
TAC(TAC_MOVE, a, 0, 0);
TAC(TAC_MOVE, b, 1, 0);
TAC(TAC_EQ, _TMP_VAR_0, argsb, 0);
TAC(TAC_JMPZ, _TMP_LABEL_0, _TMP_VAR_0, 0);
TAC(TAC_RETURN, 0, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_0, 0, 0);
TAC(TAC_EQ, _TMP_VAR_1, argsb, 1);
TAC(TAC_JMPZ, _TMP_LABEL_1, _TMP_VAR_1, 0);
TAC(TAC_RETURN, 1, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_1, 0, 0);
TAC(TAC_MOVE, result, 1, 0);
TAC(TAC_LABEL, _TMP_LABEL_2, 0, 0);
TAC(TAC_GT, _TMP_VAR_2, argsb, 1);
TAC(TAC_JMPZ, _TMP_LABEL_3, _TMP_VAR_2, 0);
TAC(TAC_ADD, _TMP_VAR_3, a, b);
TAC(TAC_MOVE, result, _TMP_VAR_3, 0);
TAC(TAC_MOVE, a, b, 0);
TAC(TAC_MOVE, b, result, 0);
TAC(TAC_SUB, _TMP_VAR_4, argsb, 1);
TAC(TAC_MOVE, argsb, _TMP_VAR_4, 0);
TAC(TAC_JMP, _TMP_LABEL_2, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_3, 0, 0);
TAC(TAC_RETURN, result, 0, 0);
TAC(TAC_ENDFUN, fibonacci, argsb, 0);
TAC(TAC_BEGINFUN, main, _TMP_VAR_36, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_5, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_5, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_6, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_6, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_8, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_7, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_7, 0, 0);
TAC(TAC_READ, _TMP_VAR_9, 0, 0);
TAC(TAC_MOVE, input, _TMP_VAR_9, 0);
TAC(TAC_MOVE, n, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_4, 0, 0);
TAC(TAC_LT, _TMP_VAR_10, n, total_n);
TAC(TAC_JMPZ, _TMP_LABEL_5, _TMP_VAR_10, 0);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_11, n, 0);
TAC(TAC_FUN_CALL, _TMP_VAR_12, fibonacci, 0);
TAC(TAC_ARR_SET_ELEMENT, arr, n, _TMP_VAR_12);
TAC(TAC_ADD, _TMP_VAR_13, n, 1);
TAC(TAC_MOVE, n, _TMP_VAR_13, 0);
TAC(TAC_JMP, _TMP_LABEL_4, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_5, 0, 0);
TAC(TAC_MOVE, n, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_15, 0, 0);
TAC(TAC_PRINT_INT, total_n, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_14, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_14, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_12, 0, 0);
TAC(TAC_LT, _TMP_VAR_16, n, total_n);
TAC(TAC_JMPZ, _TMP_LABEL_13, _TMP_VAR_16, 0);
TAC(TAC_FUNC_CALL_ARGS, _TMP_VAR_17, n, 0);
TAC(TAC_FUN_CALL, _TMP_VAR_18, fibonacci, 0);
TAC(TAC_ARR_SET_ELEMENT, arr, n, _TMP_VAR_18);
TAC(TAC_ARR_GET_ELEMENT, _TMP_VAR_19, arr, n);
TAC(TAC_EQ, _TMP_VAR_20, input, _TMP_VAR_19);
TAC(TAC_JMPZ, _TMP_LABEL_6, _TMP_VAR_20, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_23, 0, 0);
TAC(TAC_ARR_GET_ELEMENT, _TMP_VAR_21, arr, n);
TAC(TAC_PRINT_INT, _TMP_VAR_21, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_22, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_22, 0, 0);
TAC(TAC_JMP, _TMP_LABEL_7, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_6, 0, 0);
TAC(TAC_ARR_GET_ELEMENT, _TMP_VAR_24, arr, n);
TAC(TAC_PRINT_INT, _TMP_VAR_24, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_25, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_25, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_7, 0, 0);
TAC(TAC_ARR_GET_ELEMENT, _TMP_VAR_26, arr, n);
TAC(TAC_GT, _TMP_VAR_27, input, _TMP_VAR_26);
TAC(TAC_JMPZ, _TMP_LABEL_9, _TMP_VAR_27, 0);
TAC(TAC_ADD, _TMP_VAR_28, n, 1);
TAC(TAC_ARR_GET_ELEMENT, _TMP_VAR_29, arr, _TMP_VAR_28);
TAC(TAC_LT, _TMP_VAR_30, input, _TMP_VAR_29);
TAC(TAC_JMPZ, _TMP_LABEL_8, _TMP_VAR_30, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_31, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_31, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_8, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_9, 0, 0);
TAC(TAC_ADD, _TMP_VAR_32, n, 1);
TAC(TAC_MOVE, n, _TMP_VAR_32, 0);
TAC(TAC_GTE, _TMP_VAR_33, count, columns);
TAC(TAC_JMPZ, _TMP_LABEL_10, _TMP_VAR_33, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_34, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_34, 0, 0);
TAC(TAC_MOVE, count, 0, 0);
TAC(TAC_JMP, _TMP_LABEL_11, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_10, 0, 0);
TAC(TAC_ADD, _TMP_VAR_35, count, 1);
TAC(TAC_MOVE, count, _TMP_VAR_35, 0);
TAC(TAC_LABEL, _TMP_LABEL_11, 0, 0);
TAC(TAC_JMP, _TMP_LABEL_12, 0, 0);
TAC(TAC_LABEL, _TMP_LABEL_13, 0, 0);
TAC(TAC_PRINT_STRING, _TMP_VAR_36, 0, 0);
TAC(TAC_PRINT, _TMP_VAR_36, 0, 0);
TAC(TAC_ENDFUN, main, 0, 0);
values:
condition: (==0) body_if: {
return 0;

} body_else:

.condition: (==1) body_if: {
return 1;

} body_else:

.condition: input==arr[n] body_if: print "[__dash__>", arr[n], "<__dash__] " body_else:print arr[n], "\t"

.condition: input<arr[n+1] body_if: print "[*] " body_else:

.condition: input>arr[n] body_if: if input<arr[n+1] then print "[*] " body_else:

.condition: (count>=columns) body_if: {
print "\n";
count=0;

} body_else:{
count=count+1;

}

.Numero de linhas: 76.
Compilation Success.
Teste 3:Arrays

Enter a number: 610

Os 30 primeiros numeros da sequencia de fibonacci sÃ£o:
0       1       1       2       3       5       8
13      21      34      55      89      144     233
377     [->610<-] 987   1597    2584    4181    6765
10946   17711   28657   46368   75025   121393  196418
317811  514229
